============================= test session starts ==============================
platform linux -- Python 3.6.8, pytest-3.10.1, py-1.10.0, pluggy-1.0.0
rootdir: /home/cdsw/cis_households, inifile:
plugins: regressions-2.2.0, datadir-1.3.1
collected 277 items / 276 deselected

tests/pipeline/test_impute_impute_key_columns.py -----------------------------------
+--------------+---------------+------+-------------------+---------------------------------+---------------------+-------------------------------+--------------------------+--------------+------------------------+
|participant_id|ethnicity_white|   sex|      date_of_birth|ethnicity_white_imputation_method|sex_imputation_method|date_of_birth_imputation_method|ethnicity_white_is_imputed|sex_is_imputed|date_of_birth_is_imputed|
+--------------+---------------+------+-------------------+---------------------------------+---------------------+-------------------------------+--------------------------+--------------+------------------------+
|           C-A|          other|Female|         1990-01-01|             impute_by_k_neare...|                 null|                           null|                         1|             0|                       0|
|           B-A|          other|Female|         1990-01-02|                             null|                 null|                         method|                         0|             0|                       1|
|           A-B|          white|Female|         1990-01-01|                   impute_by_mode| impute_by_distrib...|                           null|                         1|             1|                       0|
|           A-A|          white|Female|1990-01-14 00:00:00|                             null|                 null|           impute_date_by_k_...|                         0|             0|                       1|
+--------------+---------------+------+-------------------+---------------------------------+---------------------+-------------------------------+--------------------------+--------------+------------------------+

[('participant_id', 'string'), ('ethnicity_white', 'string'), ('sex', 'string'), ('date_of_birth', 'string'), ('ethnicity_white_imputation_method', 'string'), ('sex_imputation_method', 'string'), ('date_of_birth_imputation_method', 'string'), ('ethnicity_white_is_imputed', 'int'), ('sex_is_imputed', 'int'), ('date_of_birth_is_imputed', 'int')]
+--------------+---------------+------+-------------------+---------------------------------+---------------------+-------------------------------+--------------------------+--------------+------------------------+----+-----+
|participant_id|ethnicity_white|   sex|      date_of_birth|ethnicity_white_imputation_method|sex_imputation_method|date_of_birth_imputation_method|ethnicity_white_is_imputed|sex_is_imputed|date_of_birth_is_imputed|YEAR|MONTH|
+--------------+---------------+------+-------------------+---------------------------------+---------------------+-------------------------------+--------------------------+--------------+------------------------+----+-----+
|           C-A|          other|Female|         1990-01-01|             impute_by_k_neare...|                 null|                           null|                         1|             0|                       0|1990|    1|
|           B-A|          other|Female|         1990-01-02|                             null|                 null|                         method|                         0|             0|                       1|1990|    1|
|           A-B|          white|Female|         1990-01-01|                   impute_by_mode| impute_by_distrib...|                           null|                         1|             1|                       0|1990|    1|
|           A-A|          white|Female|1990-01-14 00:00:00|                             null|                 null|           impute_date_by_k_...|                         0|             0|                       1|1990|    1|
+--------------+---------------+------+-------------------+---------------------------------+---------------------+-------------------------------+--------------------------+--------------+------------------------+----+-----+

FE

==================================== ERRORS ====================================
_________________ ERROR at teardown of test_impute_key_columns _________________

self = <py4j.java_gateway.GatewayClient object at 0x7fcb25541358>

    def _get_connection(self):
        if not self.is_connected:
            raise Py4JNetworkError("Gateway is not connected.")
        try:
>           connection = self.deque.pop()
E           IndexError: pop from an empty deque

/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py:929: IndexError

During handling of the above exception, another exception occurred:

self = <py4j.java_gateway.GatewayConnection object at 0x7fcb25548a20>

    def start(self):
        """Starts the connection by connecting to the `address` and the `port`
        """
        try:
>           self.socket.connect((self.address, self.port))
E           ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py:1067: ConnectionRefusedError

During handling of the above exception, another exception occurred:

tp = <class 'py4j.protocol.Py4JNetworkError'>, value = None, tb = None

    def reraise(tp, value, tb=None):
        try:
            if value is None:
                value = tp()
            if value.__traceback__ is not tb:
                raise value.with_traceback(tb)
>           raise value

/usr/local/lib/python3.6/dist-packages/six.py:693:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/local/lib/python3.6/dist-packages/six.py:693: in reraise
    raise value
/usr/local/lib/python3.6/dist-packages/six.py:693: in reraise
    raise value
conftest.py:59: in spark_session
    spark_session.stop()
/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/session.py:836: in stop
    self._jvm.SparkSession.clearDefaultSession()
/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py:1649: in __getattr__
    "\n" + proto.END_COMMAND_PART)
/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py:983: in send_command
    connection = self._get_connection()
/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py:931: in _get_connection
    connection = self._create_connection()
/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py:937: in _create_connection
    connection.start()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <py4j.java_gateway.GatewayConnection object at 0x7fcb25548a20>

    def start(self):
        """Starts the connection by connecting to the `address` and the `port`
        """
        try:
            self.socket.connect((self.address, self.port))
            self.stream = self.socket.makefile("rb")
            self.is_connected = True

            self._authenticate_connection()
        except Py4JAuthenticationError:
            logger.exception("Cannot authenticate with gateway server.")
            raise
        except Exception as e:
            msg = "An error occurred while trying to connect to the Java "\
                "server ({0}:{1})".format(self.address, self.port)
            logger.exception(msg)
>           raise Py4JNetworkError(msg, e)
E           py4j.protocol.Py4JNetworkError: An error occurred while trying to connect to the Java server (127.0.0.1:37305)

/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py:1079: Py4JNetworkError
------------------------------ Captured log call -------------------------------
impute.py                  781 WARNING  No bounds for impute variables specified, using default: {'cis_area_code_20': [None, None, None]}
impute.py                  777 WARNING  No imputation weights specified, using default: [1, 1, 1]
impute.py                  781 WARNING  No bounds for impute variables specified, using default: {'region_code': [None, None, None], 'people_in_household_count_group': [None, None, None], 'work_status_group': [None, None, None]}
impute.py                  777 WARNING  No imputation weights specified, using default: [1, 1, 1]
impute.py                  781 WARNING  No bounds for impute variables specified, using default: {'region_code': [None, None, None], 'people_in_household_count_group': [None, None, None], 'work_status_group': [None, None, None]}
java_gateway.py           1003 ERROR    Exception while sending command.
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1159, in send_command
    raise Py4JNetworkError("Answer from Java side is empty")
py4j.protocol.Py4JNetworkError: Answer from Java side is empty

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 985, in send_command
    response = connection.send_command(command)
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1164, in send_command
    "Error while receiving", e, proto.ERROR_ON_RECEIVE)
py4j.protocol.Py4JNetworkError: Error while receiving
java_gateway.py           1003 ERROR    Exception while sending command.
Traceback (most recent call last):
  File "/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/dataframe.py", line 533, in collect
    sock_info = self._jdf.collectToPython()
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1257, in __call__
    answer, self.gateway_client, self.target_id, self.name)
  File "/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/utils.py", line 63, in deco
    return f(*a, **kw)
  File "/usr/local/lib/python3.6/dist-packages/py4j/protocol.py", line 336, in get_return_value
    format(target_id, ".", name))
py4j.protocol.Py4JError: An error occurred while calling o1913.collectToPython

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1159, in send_command
    raise Py4JNetworkError("Answer from Java side is empty")
py4j.protocol.Py4JNetworkError: Answer from Java side is empty

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 985, in send_command
    response = connection.send_command(command)
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1164, in send_command
    "Error while receiving", e, proto.ERROR_ON_RECEIVE)
py4j.protocol.Py4JNetworkError: Error while receiving
---------------------------- Captured log teardown -----------------------------
java_gateway.py           1078 ERROR    An error occurred while trying to connect to the Java server (127.0.0.1:37305)
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 929, in _get_connection
    connection = self.deque.pop()
IndexError: pop from an empty deque

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1067, in start
    self.socket.connect((self.address, self.port))
ConnectionRefusedError: [Errno 111] Connection refused
java_gateway.py           1078 ERROR    An error occurred while trying to connect to the Java server (127.0.0.1:37305)
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 929, in _get_connection
    connection = self.deque.pop()
IndexError: pop from an empty deque

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1067, in start
    self.socket.connect((self.address, self.port))
ConnectionRefusedError: [Errno 111] Connection refused
=================================== FAILURES ===================================
___________________________ test_impute_key_columns ____________________________

self = <[Py4JNetworkError("An error occurred while trying to connect to the Java server (127.0.0.1:37305)") raised in repr()] DataFrame object at 0x7fcb240d1908>

    @ignore_unicode_prefix
    @since(1.3)
    def collect(self):
        """Returns all the records as a list of :class:`Row`.

        >>> df.collect()
        [Row(age=2, name=u'Alice'), Row(age=5, name=u'Bob')]
        """
        with SCCallSiteSync(self._sc) as css:
>           sock_info = self._jdf.collectToPython()

/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/dataframe.py:533:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <py4j.java_gateway.JavaMember object at 0x7fcb241b16d8>, args = ()
args_command = '', temp_args = [], command = 'c\no1913\ncollectToPython\ne\n'

    def __call__(self, *args):
        args_command, temp_args = self._build_args(*args)

        command = proto.CALL_COMMAND_NAME +\
            self.command_header +\
            args_command +\
            proto.END_COMMAND_PART

        answer = self.gateway_client.send_command(command)
        return_value = get_return_value(
>           answer, self.gateway_client, self.target_id, self.name)

/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py:1257:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

a = ('x', <py4j.java_gateway.GatewayClient object at 0x7fcb25541358>, 'o1913', 'collectToPython')
kw = {}

    def deco(*a, **kw):
        try:
>           return f(*a, **kw)

/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/utils.py:63:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

answer = 'x'
gateway_client = <py4j.java_gateway.GatewayClient object at 0x7fcb25541358>
target_id = 'o1913', name = 'collectToPython'

    def get_return_value(answer, gateway_client, target_id=None, name=None):
        """Converts an answer received from the Java gateway into a Python object.

        For example, string representation of integers are converted to Python
        integer, string representation of objects are converted to JavaObject
        instances, etc.

        :param answer: the string returned by the Java gateway
        :param gateway_client: the gateway client used to communicate with the Java
            Gateway. Only necessary if the answer is a reference (e.g., object,
            list, map)
        :param target_id: the name of the object from which the answer comes from
            (e.g., *object1* in `object1.hello()`). Optional.
        :param name: the name of the member from which the answer comes from
            (e.g., *hello* in `object1.hello()`). Optional.
        """
        if is_error(answer)[0]:
            if len(answer) > 1:
                type = answer[1]
                value = OUTPUT_CONVERTER[type](answer[2:], gateway_client)
                if answer[1] == REFERENCE_TYPE:
                    raise Py4JJavaError(
                        "An error occurred while calling {0}{1}{2}.\n".
                        format(target_id, ".", name), value)
                else:
                    raise Py4JError(
                        "An error occurred while calling {0}{1}{2}. Trace:\n{3}\n".
                        format(target_id, ".", name, value))
            else:
                raise Py4JError(
                    "An error occurred while calling {0}{1}{2}".
>                   format(target_id, ".", name))
E               py4j.protocol.Py4JError: An error occurred while calling o1913.collectToPython

/usr/local/lib/python3.6/dist-packages/py4j/protocol.py:336: Py4JError

During handling of the above exception, another exception occurred:

spark_session = <pyspark.sql.session.SparkSession object at 0x7fcb26b5af98>

    @pytest.mark.integration
    def test_impute_key_columns(spark_session):
        """Test that high level imputation fills all missing values and reduces
        to one record per participant."""
        os.environ["deployment"] = "local"
        input_data = [
            # fmt: off
            ("A", "A-A", "1", "A", "g1", "3", "white", "Female", "1990-01-01", "1990-01-01"),
            ("A", "A-A", "1", "B", "g1", "3", "white", "Female", None, "1990-01-02"),  # Fill forward
            ("A", "A-B", "1", "B", "g1", "3", None, None, "1990-01-01", "1990-01-01"),  # Impute by mode
            ("B", "B-A", "2", "B", "g1", "1", "other", "Female", None, "1990-01-01"),  # Impute by lookup
            ("C", "C-A", "2", "A", "g1", "1", None, "Female", "1990-01-01", "1990-01-01"),
            # Impute by KNN
            # fmt: on
        ]
        input_df = spark_session.createDataFrame(
            input_data,
            schema="""ons_household_id string, participant_id string, cis_area_code_20 string, region_code string, work_status_group string, people_in_household_count_group string,
                    ethnicity_white string, sex string, date_of_birth string, visit_datetime string""",
        )

        lookup_data = [("B-A", None, None, None, None, "1990-01-02", "method")]
        lookup_df = spark_session.createDataFrame(
            lookup_data,
            schema="""participant_id string, ethnicity_white string, ethnicity_white_imputation_method string,
            sex string, sex_imputation_method string, date_of_birth string, date_of_birth_imputation_method string""",
        )

        expected_data = [
            # fmt: off
            ("A-A", "white", "Female", 1990, 1, None, None, None),
            ("A-B", "white", "Female", 1990, 1, "impute_by_mode", "impute_by_distribution", None),
            ("B-A", "other", "Female", 1990, 1, None, None, "method"),
            ("C-A", "other", "Female", 1990, 1, "impute_date_by_k_nearest_neighbours", None, None),
            # Impute by KNN
            # fmt: on
        ]
        expected_df = spark_session.createDataFrame(
            expected_data,
            schema="""participant_id string, ethnicity_white string, sex string, YEAR integer, MONTH integer,
                    ethnicity_white_imputation_method string, sex_imputation_method string,
                    date_of_birth_imputation_method string""",
        )

        value_columns = ["participant_id", "ethnicity_white", "sex", "YEAR", "MONTH"]
        method_columns = [
            "participant_id",
            "ethnicity_white_imputation_method",
            "sex_imputation_method",
            "date_of_birth_imputation_method",
        ]
        output_df = impute_key_columns(input_df, lookup_df, log_directory="./")
        output_df.show()
        print(output_df.dtypes)
        output_df = output_df.withColumn("YEAR", F.year("date_of_birth")).withColumn("MONTH", F.month("date_of_birth"))
        output_df.show()
        for columns in [value_columns, method_columns]:
            assert_df_equality(
>               output_df.select(*columns), expected_df.select(*columns), ignore_row_order=True, ignore_column_order=True
            )

tests/pipeline/test_impute_impute_key_columns.py:68:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../.local/lib/python3.6/site-packages/chispa/dataframe_comparer.py:27: in assert_df_equality
    assert_basic_rows_equality(df1, df2)
../.local/lib/python3.6/site-packages/chispa/dataframe_comparer.py:68: in assert_basic_rows_equality
    rows1 = df1.collect()
/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/dataframe.py:533: in collect
    sock_info = self._jdf.collectToPython()
/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/traceback_utils.py:78: in __exit__
    self._context._jsc.setCallSite(None)
/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py:1257: in __call__
    answer, self.gateway_client, self.target_id, self.name)
/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/utils.py:63: in deco
    return f(*a, **kw)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

answer = 'x'
gateway_client = <py4j.java_gateway.GatewayClient object at 0x7fcb25541358>
target_id = 'o74', name = 'setCallSite'

    def get_return_value(answer, gateway_client, target_id=None, name=None):
        """Converts an answer received from the Java gateway into a Python object.

        For example, string representation of integers are converted to Python
        integer, string representation of objects are converted to JavaObject
        instances, etc.

        :param answer: the string returned by the Java gateway
        :param gateway_client: the gateway client used to communicate with the Java
            Gateway. Only necessary if the answer is a reference (e.g., object,
            list, map)
        :param target_id: the name of the object from which the answer comes from
            (e.g., *object1* in `object1.hello()`). Optional.
        :param name: the name of the member from which the answer comes from
            (e.g., *hello* in `object1.hello()`). Optional.
        """
        if is_error(answer)[0]:
            if len(answer) > 1:
                type = answer[1]
                value = OUTPUT_CONVERTER[type](answer[2:], gateway_client)
                if answer[1] == REFERENCE_TYPE:
                    raise Py4JJavaError(
                        "An error occurred while calling {0}{1}{2}.\n".
                        format(target_id, ".", name), value)
                else:
                    raise Py4JError(
                        "An error occurred while calling {0}{1}{2}. Trace:\n{3}\n".
                        format(target_id, ".", name, value))
            else:
                raise Py4JError(
                    "An error occurred while calling {0}{1}{2}".
>                   format(target_id, ".", name))
E               py4j.protocol.Py4JError: An error occurred while calling o74.setCallSite

/usr/local/lib/python3.6/dist-packages/py4j/protocol.py:336: Py4JError
------------------------------ Captured log call -------------------------------
impute.py                  781 WARNING  No bounds for impute variables specified, using default: {'cis_area_code_20': [None, None, None]}
impute.py                  777 WARNING  No imputation weights specified, using default: [1, 1, 1]
impute.py                  781 WARNING  No bounds for impute variables specified, using default: {'region_code': [None, None, None], 'people_in_household_count_group': [None, None, None], 'work_status_group': [None, None, None]}
impute.py                  777 WARNING  No imputation weights specified, using default: [1, 1, 1]
impute.py                  781 WARNING  No bounds for impute variables specified, using default: {'region_code': [None, None, None], 'people_in_household_count_group': [None, None, None], 'work_status_group': [None, None, None]}
java_gateway.py           1003 ERROR    Exception while sending command.
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1159, in send_command
    raise Py4JNetworkError("Answer from Java side is empty")
py4j.protocol.Py4JNetworkError: Answer from Java side is empty

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 985, in send_command
    response = connection.send_command(command)
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1164, in send_command
    "Error while receiving", e, proto.ERROR_ON_RECEIVE)
py4j.protocol.Py4JNetworkError: Error while receiving
java_gateway.py           1003 ERROR    Exception while sending command.
Traceback (most recent call last):
  File "/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/dataframe.py", line 533, in collect
    sock_info = self._jdf.collectToPython()
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1257, in __call__
    answer, self.gateway_client, self.target_id, self.name)
  File "/opt/cloudera/parcels/CDH/lib/spark/python/pyspark/sql/utils.py", line 63, in deco
    return f(*a, **kw)
  File "/usr/local/lib/python3.6/dist-packages/py4j/protocol.py", line 336, in get_return_value
    format(target_id, ".", name))
py4j.protocol.Py4JError: An error occurred while calling o1913.collectToPython

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1159, in send_command
    raise Py4JNetworkError("Answer from Java side is empty")
py4j.protocol.Py4JNetworkError: Answer from Java side is empty

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 985, in send_command
    response = connection.send_command(command)
  File "/usr/local/lib/python3.6/dist-packages/py4j/java_gateway.py", line 1164, in send_command
    "Error while receiving", e, proto.ERROR_ON_RECEIVE)
py4j.protocol.Py4JNetworkError: Error while receiving
=============================== warnings summary ===============================
tests/pipeline/test_impute_impute_key_columns.py::test_impute_key_columns
  /opt/cloudera/parcels/CDH/lib/spark/python/pyspark/context.py:433: RuntimeWarning: Unable to cleanly shutdown Spark JVM process. It is possible that the process has crashed, been killed or may also be in a zombie state.
    RuntimeWarning

-- Docs: https://docs.pytest.org/en/latest/warnings.html
======= 1 failed, 276 deselected, 1 warnings, 1 error in 198.12 seconds ========
